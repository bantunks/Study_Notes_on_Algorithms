1. Binary Search Tree
  1.1 Copying a Binary Search Tree Or Creating a Clone Or Creating a Mirror of a BST
      1.1.1 Use Preorder Traversal to copy/clone/mirror each node
  1.2 Copying a Binary Search Tree Or Creating a Clone Or Creating a Mirror of a BST AND avoiding any cycles
      1.2.1 Maintain a map of info of each node NodeMap<node->info, bool>
      1.2.2 While inserting each node in the target tree, first check if this node is already marked as TRUE in the NodeMap
      1.2.3 If 1.2.2 returns false, insert the node, else skip this node
      void copyNode(NODE<T>* cur1, NODE<T>* cur2)
      {
        cout << "Inside copyNode: " << cur1->getInfo() << endl;
        if(cur1->getInfo() == cur2->getInfo()) {
          // this is copy of the root node
          nodeMap[cur1->getInfo()] = true;
          return;
        } else {
          T info = cur1->getInfo();
          NODE<T>* newNode = new NODE<T>(info);
          NODE<T>* temp1 = cur2;
          NODE<T>* temp2 = NULL;
          while(temp1) {
            temp2 = temp1;
            temp1->getInfo() > info ? temp1 = temp1->getLeft() : temp1 = temp1->getRight();
          }
          temp2->getInfo() > info ? temp2->setLeft(newNode) : temp2->setRight(newNode);
          nodeMap[info] = true;
         }
       }

      void copyBSTPreorder(NODE<T>* ROOT1, NODE<T>* ROOT2)
      {
        if (!ROOT1) {
          return;
        }
        if( (nodeMap.empty()) || (!(nodeMap[ROOT1->getInfo()])))
        {
          copyNode(ROOT1, ROOT2);
        } else {
          return;
        }
        copyBSTPreorder(ROOT1->getLeft(), ROOT2);
        
        
        copyBSTPreorder(ROOT1->getRight(), ROOT2);
      }
      NODE<T>* copyBST(NODE<T>* ROOT1, NODE<T>* ROOT2)
      {
        //NODE<T>* ROOT2 = new NODE<T>(this->getROOT()->getInfo());
        copyBSTPreorder(ROOT1, ROOT2);
        return ROOT2;
      }

  1.3 Copying a Binary Search Tree Or Creating a Clone Or Creating a Mirror of a BST AND also copying any cycles
    1.3.1 
